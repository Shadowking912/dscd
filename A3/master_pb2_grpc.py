# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import master_pb2 as master__pb2


class MasterMapperCommunicationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MapperParameters = channel.unary_unary(
                '/communication_raft.MasterMapperCommunication/MapperParameters',
                request_serializer=master__pb2.MapRequest.SerializeToString,
                response_deserializer=master__pb2.MapResponse.FromString,
                )


class MasterMapperCommunicationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MapperParameters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterMapperCommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MapperParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.MapperParameters,
                    request_deserializer=master__pb2.MapRequest.FromString,
                    response_serializer=master__pb2.MapResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'communication_raft.MasterMapperCommunication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterMapperCommunication(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MapperParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/communication_raft.MasterMapperCommunication/MapperParameters',
            master__pb2.MapRequest.SerializeToString,
            master__pb2.MapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapperReducerCommunicationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PartitionParameters = channel.unary_unary(
                '/communication_raft.MapperReducerCommunication/PartitionParameters',
                request_serializer=master__pb2.PartionRequest.SerializeToString,
                response_deserializer=master__pb2.PartionResponse.FromString,
                )


class MapperReducerCommunicationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PartitionParameters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperReducerCommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PartitionParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.PartitionParameters,
                    request_deserializer=master__pb2.PartionRequest.FromString,
                    response_serializer=master__pb2.PartionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'communication_raft.MapperReducerCommunication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperReducerCommunication(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PartitionParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/communication_raft.MapperReducerCommunication/PartitionParameters',
            master__pb2.PartionRequest.SerializeToString,
            master__pb2.PartionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MasterReducerCommunicationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReducerParameters = channel.unary_unary(
                '/communication_raft.MasterReducerCommunication/ReducerParameters',
                request_serializer=master__pb2.ReducerRequest.SerializeToString,
                response_deserializer=master__pb2.ReducerResponse.FromString,
                )


class MasterReducerCommunicationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReducerParameters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterReducerCommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReducerParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.ReducerParameters,
                    request_deserializer=master__pb2.ReducerRequest.FromString,
                    response_serializer=master__pb2.ReducerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'communication_raft.MasterReducerCommunication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterReducerCommunication(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReducerParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/communication_raft.MasterReducerCommunication/ReducerParameters',
            master__pb2.ReducerRequest.SerializeToString,
            master__pb2.ReducerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
